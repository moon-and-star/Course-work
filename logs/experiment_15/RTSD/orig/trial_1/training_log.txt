I0508 00:43:56.811540 27808 caffe.cpp:217] Using GPUs 1
I0508 00:43:56.927031 27808 caffe.cpp:222] GPU 1: GeForce GTX 1070
I0508 00:43:57.875145 27808 solver.cpp:60] Initializing solver from parameters: 
train_net: "./Prototxt/experiment_15/RTSD/orig/trial_1/train.prototxt"
test_net: "./Prototxt/experiment_15/RTSD/orig/trial_1/test.prototxt"
test_iter: 17
test_interval: 85
base_lr: 0.0001
display: 1
max_iter: 8500
lr_policy: "step"
gamma: 0.7
momentum: 0.9
weight_decay: 0.0005
stepsize: 1700
snapshot: 850
snapshot_prefix: "./snapshots/experiment_15/RTSD/orig/trial_1/snap"
solver_mode: GPU
device_id: 1
train_state {
  level: 0
  stage: ""
}
iter_size: 1
type: "Adam"
I0508 00:43:57.875282 27808 solver.cpp:93] Creating training net from train_net file: ./Prototxt/experiment_15/RTSD/orig/trial_1/train.prototxt
I0508 00:43:57.875757 27808 net.cpp:58] Initializing net from parameters: 
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.0039215689
    mirror: false
    crop_size: 48
    mean_value: 119
    mean_value: 113
    mean_value: 113
  }
  data_param {
    source: "../local_data/lmdb/RTSD/orig/train/lmdb"
    batch_size: 1024
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 100
    pad: 0
    kernel_size: 7
    group: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "conv1_prescale"
  type: "Scale"
  bottom: "conv1"
  top: "conv1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  scale_param {
    filler {
      value: 0.6666
    }
    bias_term: false
  }
}
layer {
  name: "conv1_sTanH"
  type: "TanH"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "conv1_postscale"
  type: "Scale"
  bottom: "conv1"
  top: "conv1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  scale_param {
    filler {
      value: 1.7159
    }
    bias_term: false
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  convolution_param {
    num_output: 150
    pad: 0
    kernel_size: 4
    group: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "conv2_prescale"
  type: "Scale"
  bottom: "conv2"
  top: "conv2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  scale_param {
    filler {
      value: 0.6666
    }
    bias_term: false
  }
}
layer {
  name: "conv2_sTanH"
  type: "TanH"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "conv2_postscale"
  type: "Scale"
  bottom: "conv2"
  top: "conv2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  scale_param {
    filler {
      value: 1.7159
    }
    bias_term: false
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  convolution_param {
    num_output: 250
    pad: 0
    kernel_size: 4
    group: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "conv3_prescale"
  type: "Scale"
  bottom: "conv3"
  top: "conv3"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  scale_param {
    filler {
      value: 0.6666
    }
    bias_term: false
  }
}
layer {
  name: "conv3_sTanH"
  type: "TanH"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv3_postscale"
  type: "Scale"
  bottom: "conv3"
  top: "conv3"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  scale_param {
    filler {
      value: 1.7159
    }
    bias_term: false
  }
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "fc4_300"
  type: "InnerProduct"
  bottom: "pool3"
  top: "fc4_300"
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "fc4_prescale"
  type: "Scale"
  bottom: "fc4_300"
  top: "fc4_300"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  scale_param {
    filler {
      value: 0.6666
    }
    bias_term: false
  }
}
layer {
  name: "fc4_sTanH"
  type: "TanH"
  bottom: "fc4_300"
  top: "fc4_300"
}
layer {
  name: "fc4_postscale"
  type: "Scale"
  bottom: "fc4_300"
  top: "fc4_300"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  scale_param {
    filler {
      value: 1.7159
    }
    bias_term: false
  }
}
layer {
  name: "fc5_116"
  type: "InnerProduct"
  bottom: "fc4_300"
  top: "fc5_classes"
  inner_product_param {
    num_output: 116
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "softmax"
  type: "Softmax"
  bottom: "fc5_classes"
  top: "softmax"
}
layer {
  name: "loss"
  type: "MultinomialLogisticLoss"
  bottom: "softmax"
  bottom: "label"
  top: "loss"
}
layer {
  name: "accuracy_1"
  type: "Accuracy"
  bottom: "fc5_classes"
  bottom: "label"
  top: "accuracy_1"
  accuracy_param {
    top_k: 1
  }
}
layer {
  name: "accuracy_5"
  type: "Accuracy"
  bottom: "fc5_classes"
  bottom: "label"
  top: "accuracy_5"
  accuracy_param {
    top_k: 5
  }
}
layer {
  name: "silence"
  type: "Silence"
  bottom: "accuracy_1"
  bottom: "accuracy_5"
}
I0508 00:43:57.875926 27808 layer_factory.hpp:77] Creating layer data
I0508 00:43:57.876978 27808 net.cpp:100] Creating Layer data
I0508 00:43:57.876993 27808 net.cpp:408] data -> data
I0508 00:43:57.877017 27808 net.cpp:408] data -> label
I0508 00:43:57.879752 27932 db_lmdb.cpp:35] Opened lmdb ../local_data/lmdb/RTSD/orig/train/lmdb
I0508 00:43:57.897770 27808 data_layer.cpp:41] output data size: 1024,3,48,48
I0508 00:43:57.955035 27808 net.cpp:150] Setting up data
I0508 00:43:57.955066 27808 net.cpp:157] Top shape: 1024 3 48 48 (7077888)
I0508 00:43:57.955071 27808 net.cpp:157] Top shape: 1024 (1024)
I0508 00:43:57.955073 27808 net.cpp:165] Memory required for data: 28315648
I0508 00:43:57.955085 27808 layer_factory.hpp:77] Creating layer label_data_1_split
I0508 00:43:57.955101 27808 net.cpp:100] Creating Layer label_data_1_split
I0508 00:43:57.955106 27808 net.cpp:434] label_data_1_split <- label
I0508 00:43:57.955121 27808 net.cpp:408] label_data_1_split -> label_data_1_split_0
I0508 00:43:57.955133 27808 net.cpp:408] label_data_1_split -> label_data_1_split_1
I0508 00:43:57.955142 27808 net.cpp:408] label_data_1_split -> label_data_1_split_2
I0508 00:43:57.955211 27808 net.cpp:150] Setting up label_data_1_split
I0508 00:43:57.955219 27808 net.cpp:157] Top shape: 1024 (1024)
I0508 00:43:57.955224 27808 net.cpp:157] Top shape: 1024 (1024)
I0508 00:43:57.955226 27808 net.cpp:157] Top shape: 1024 (1024)
I0508 00:43:57.955229 27808 net.cpp:165] Memory required for data: 28327936
I0508 00:43:57.955232 27808 layer_factory.hpp:77] Creating layer conv1
I0508 00:43:57.955252 27808 net.cpp:100] Creating Layer conv1
I0508 00:43:57.955257 27808 net.cpp:434] conv1 <- data
I0508 00:43:57.955265 27808 net.cpp:408] conv1 -> conv1
F0508 00:43:57.955384 27808 base_conv_layer.cpp:122] Check failed: channels_ % group_ == 0 (1 vs. 0) 
*** Check failure stack trace: ***
    @     0x7f5081e925cd  google::LogMessage::Fail()
    @     0x7f5081e94433  google::LogMessage::SendToLog()
    @     0x7f5081e9215b  google::LogMessage::Flush()
    @     0x7f5081e94e1e  google::LogMessageFatal::~LogMessageFatal()
    @     0x7f5082639b8e  caffe::BaseConvolutionLayer<>::LayerSetUp()
    @     0x7f50825f7187  caffe::CuDNNConvolutionLayer<>::LayerSetUp()
    @     0x7f508266f8a2  caffe::Net<>::Init()
    @     0x7f5082671131  caffe::Net<>::Net()
    @     0x7f508267985a  caffe::Solver<>::InitTrainNet()
    @     0x7f508267ab57  caffe::Solver<>::Init()
    @     0x7f508267aefa  caffe::Solver<>::Solver()
    @     0x7f50824c0a43  caffe::Creator_AdamSolver<>()
    @           0x40afb9  train()
    @           0x4077c8  main
    @     0x7f5080629830  __libc_start_main
    @           0x408099  _start
    @              (nil)  (unknown)
